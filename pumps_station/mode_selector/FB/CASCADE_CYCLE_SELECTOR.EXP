FUNCTION_BLOCK Cascade_Cycle_Selector
(* Function block implementation working mode selector. *)

VAR_INPUT
    cascade: BOOL; (* enable/disable *)
    cycle: BOOL; (* enable/disable *)
    single: BOOL; (* enable/disable *)
    info_single: classInfoSingle;
    info_cycle: classInfoCycle;
    info_cascade: classInfoCascade;
END_VAR

VAR_OUTPUT
    mode_selector_error: WORD;
    start_pump1: BOOL := FALSE;
    start_pump2: BOOL := FALSE;
    start_pump3: BOOL := FALSE;
    start_pump4: BOOL := FALSE;
    start_pump5: BOOL := FALSE;
    start_pump6: BOOL := FALSE;
    start_pump7: BOOL := FALSE;
    start_pump8: BOOL := FALSE;
END_VAR

VAR
    message: STRING(79);
    flag_mode: INT;
    error_code:  WORD;
END_VAR


IF cascade AND NOT cycle AND NOT single THEN
    flag_mode := 2;
    message := 'Cascade mode selected'; (* Выбран каскадный режим работы. *)
ELSIF cycle AND NOT cascade AND NOT single THEN
    flag_mode := 1;
    message := 'Cycle mode selected'; (* Выбран циклический режим работы *)
ELSIF single AND NOT cycle AND NOT cascade THEN
    flag_mode := 0;
    message := 'Single mode selected'; (* Выбран режим работы одного насоса *) 
ELSE
    flag_mode := -1;
    error_code := 6;
    message := 'Select any one working mode!'; (* Выберите один режим работы! *)
END_IF;

IF flag_mode = 0 THEN
    start_pump1 := get_pump_in_single(info_single, 1);
    start_pump2 := get_pump_in_single(info_single, 2);
    start_pump3 := get_pump_in_single(info_single, 3);
    start_pump4 := get_pump_in_single(info_single, 4);
    start_pump5 := get_pump_in_single(info_single, 5);
    start_pump6 := get_pump_in_single(info_single, 6);
    start_pump7 := get_pump_in_single(info_single, 7);
    start_pump8 := get_pump_in_single(info_single, 8);
    mode_selector_error := info_single.error_code;
ELSIF flag_mode = 1 THEN
    start_pump1 := get_pump_in_cycle(info_cycle, 1);
    start_pump2 := get_pump_in_cycle(info_cycle, 2);
    start_pump3 := get_pump_in_cycle(info_cycle, 3);
    start_pump4 := get_pump_in_cycle(info_cycle, 4);
    start_pump5 := get_pump_in_cycle(info_cycle, 5);
    start_pump6 := get_pump_in_cycle(info_cycle, 6);
    start_pump7 := get_pump_in_cycle(info_cycle, 7);
    start_pump8 := get_pump_in_cycle(info_cycle, 8);
    mode_selector_error := info_cycle.error_code;
ELSIF flag_mode = 2 THEN
    start_pump1 := get_pump_in_cascade(info_cascade, 1);
    start_pump2 := get_pump_in_cascade(info_cascade, 2);
    start_pump3 := get_pump_in_cascade(info_cascade, 3);
    start_pump4 := get_pump_in_cascade(info_cascade, 4);
    start_pump5 := get_pump_in_cascade(info_cascade, 5);
    start_pump6 := get_pump_in_cascade(info_cascade, 6);
    start_pump7 := get_pump_in_cascade(info_cascade, 7);
    start_pump8 := get_pump_in_cascade(info_cascade, 8);
    mode_selector_error := info_cascade.error_code;
ELSE
    start_pump1 := FALSE;
    start_pump2 := FALSE;
    start_pump3 := FALSE;
    start_pump4 := FALSE;
    start_pump5 := FALSE;
    start_pump6 := FALSE;
    start_pump7 := FALSE;
    start_pump8 := FALSE;
    mode_selector_error: = error_code;
END_IF;

END_FUNCTION_BLOCK