FUNCTION_BLOCK cascade
(* Functional block implementation cascade mode. *)
VAR_INPUT
	enable:BOOL;
	set_pressure:REAL;
	in_pressure: REAL;
	pivot_pump: INT;
	delay_on:TIME := t#30s;
	delay_off:TIME := t#30s;
    
	info_invertor_drive1: classInfoInvertorDrive;
    info_invertor_drive2: classInfoInvertorDrive;
    info_invertor_drive3: classInfoInvertorDrive;
    info_invertor_drive4: classInfoInvertorDrive;
    info_invertor_drive5: classInfoInvertorDrive;
    info_invertor_drive6: classInfoInvertorDrive;
    info_invertor_drive7: classInfoInvertorDrive;
    info_invertor_drive8: classInfoInvertorDrive;
END_VAR

VAR_OUTPUT
	info_cascade:classInfoCascade;
END_VAR

VAR
	pumps: ARRAY [1..8] OF BOOL;
	cascade_pumps: ARRAY [1..8] OF classInfoCascadePump;
	pivot: INT;
	i: INT:=1;
	error_message: STRING(79):= 'NOT GOOD';
	start_time: TIME:=t#0s;
	work_time: TIME;
	len_pumps: INT;
	index_active_pumps:ARRAY [1..8] OF INT;
	len_active_pumps: INT;
	index_pivot: INT;
	histeresys: REAL := 0.2 (* histeresys set pressure *);
END_VAR

pivot := pivot_pump;

IF pivot = 0 THEN
	check_pivot;
ELSE
    check_active_pumps;
END_IF;

IF len_active_pumps > 1 THEN
    cascade_on;
ELSE
    i := index_pivot;
    error_message := 'cascade mode excpected more one active pumps, but got less';
END_IF;

get_info_message;
END_FUNCTION_BLOCK

ACTION check_pivot:
error_message := 'pivot pump not excpect int more 0.'
END_ACTION

ACTION check_active_pumps:

pumps[1] := get_active(info_invertor_drive1);
pumps[2] := get_active(info_invertor_drive2);
pumps[3] := get_active(info_invertor_drive3);
pumps[4] := get_active(info_invertor_drive4);
pumps[5] := get_active(info_invertor_drive5);
pumps[6] := get_active(info_invertor_drive6);
pumps[7] := get_active(info_invertor_drive7);
pumps[8] := get_active(info_invertor_drive8);

len_pumps := len_bool_array(pumps);  (* get en input pumps array. *)
index_active_pumps := index_bool_array(pumps);  (* get indexes active pumps. *)
len_active_pumps := len_int_array(index_active_pumps);  (* get len active pumps. *)

index_pivot := index_element_in_int_array(pivot, index_active_pumps); (* get index pivot.*)

END_ACTION

ACTION cascade_on:
error_message := 'GOOD';

(* inspect bounds array. *)

IF i = 1 AND i = index_pivot THEN
	i := pivot + 1;
ELSIF i = len_active_pumps AND  i = index_pivot THEN
	i := len_active_pumps - 1;
END_IF;

(* start pivot pump. *)
IF INT_TO_BOOL(index_pivot) THEN
	cascade_pumps[pivot].cascade_pump := TRUE;
END_IF;

IF start_time = t#0s THEN
	start_time := TIME();
END_IF;


IF in_pressure < (set_pressure - histeresys) THEN
	work_time := TIME() - start_time;
	IF work_time >= delay_on THEN
		IF i = index_pivot AND index_pivot < len_active_pumps THEN
			i := i + 1;
		END_IF;
		cascade_pumps[index_active_pumps[i]].cascade_pump := TRUE;
		i := i + 1;
		start_time := t#0s;
	END_IF;
ELSIF in_pressure > (set_pressure + histeresys) THEN
	work_time := TIME() - start_time;
	IF work_time >= delay_off THEN
		IF i = index_pivot AND index_pivot > 1 THEN
			i := i - 1;
		END_IF;
		cascade_pumps[index_active_pumps[i]].cascade_pump := FALSE;
		i := i - 1;
		start_time := t#0s;
	END_IF;
END_IF;

IF i > len_active_pumps  THEN
	i := len_active_pumps;
ELSIF i < 1 THEN
	i := 1;
END_IF;
END_ACTION

ACTION	get_info_message:
IF enable AND error_message = 'GOOD' THEN
	info_cascade.pivot := pivot;
	info_cascade.error_message := error_message;
	info_cascade.cascade_pump1 := cascade_pumps[1];
	info_cascade.cascade_pump2 := cascade_pumps[2];
	info_cascade.cascade_pump3 := cascade_pumps[3];
	info_cascade.cascade_pump4 := cascade_pumps[4];
	info_cascade.cascade_pump5 := cascade_pumps[5];
	info_cascade.cascade_pump6 := cascade_pumps[6];
	info_cascade.cascade_pump7 := cascade_pumps[7];
	info_cascade.cascade_pump8 := cascade_pumps[8];
ELSE
	info_cascade.pivot := 1;
	info_cascade.error_message := error_message;
	cascade_pumps[1].cascade_pump := FALSE;
	cascade_pumps[2].cascade_pump := FALSE;
	cascade_pumps[3].cascade_pump := FALSE;
	cascade_pumps[4].cascade_pump := FALSE;
	cascade_pumps[5].cascade_pump := FALSE;
	cascade_pumps[6].cascade_pump := FALSE;
	cascade_pumps[7].cascade_pump := FALSE;
	cascade_pumps[8].cascade_pump := FALSE;
	info_cascade.cascade_pump1 := cascade_pumps[1];
	info_cascade.cascade_pump2 := cascade_pumps[2];
	info_cascade.cascade_pump3 := cascade_pumps[3];
	info_cascade.cascade_pump4 := cascade_pumps[4];
	info_cascade.cascade_pump5 := cascade_pumps[5];
	info_cascade.cascade_pump6 := cascade_pumps[6];
	info_cascade.cascade_pump7 := cascade_pumps[7];
	info_cascade.cascade_pump8 := cascade_pumps[8];
END_IF;
END_ACTION